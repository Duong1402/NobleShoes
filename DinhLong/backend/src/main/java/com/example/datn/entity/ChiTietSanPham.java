package com.example.datn.entity;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import lombok.*;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;
import java.util.UUID;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Entity
@Table(name = "chi_tiet_san_pham")
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
public class ChiTietSanPham {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(columnDefinition = "uniqueidentifier")
    private UUID id;

    // üîπ Li√™n k·∫øt b·∫Øt bu·ªôc v·ªõi s·∫£n ph·∫©m
    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "id_san_pham", nullable = false)
    @JsonIgnoreProperties({"chiTietSanPhams"})
    @JsonBackReference
    private SanPham sanPham;

    // üîπ B·∫Øt bu·ªôc ch·ªçn m√†u s·∫Øc
    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "id_mau_sac", nullable = false)
    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
    private MauSac mauSac;

    // üîπ B·∫Øt bu·ªôc ch·ªçn k√≠ch th∆∞·ªõc
    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "id_kich_thuoc", nullable = false)
    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
    private KichThuoc kichThuoc;

    // üîπ B·∫Øt bu·ªôc c√≥ ch·∫•t li·ªáu
    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "id_chat_lieu", nullable = false)
    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
    private ChatLieu chatLieu;

    // üîπ C√≥ th·ªÉ null n·∫øu kh√¥ng c√≥ ƒë·ª£t gi·∫£m gi√°
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_dot_giam_gia")
    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
    private DotGiamGia dotGiamGia;

    // üîπ M√£ bi·∫øn th·ªÉ (unique, c√≥ th·ªÉ t·ª± sinh)
    @Column(length = 50, unique = true)
    @Size(max = 50, message = "M√£ chi ti·∫øt s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 50 k√Ω t·ª±")
    private String ma;

    // üîπ Gi√° nh·∫≠p (>= 0)
    @Column(name = "gia_nhap", precision = 18, scale = 2)
    @DecimalMin(value = "0.0", inclusive = true, message = "Gi√° nh·∫≠p kh√¥ng ƒë∆∞·ª£c √¢m")
    private BigDecimal giaNhap;

    // üîπ Gi√° b√°n (>= 0, kh√¥ng ƒë∆∞·ª£c null)
    @Column(name = "gia_ban", precision = 18, scale = 2, nullable = false)
    @NotNull(message = "Gi√° b√°n l√† b·∫Øt bu·ªôc")
    @DecimalMin(value = "0.0", inclusive = false, message = "Gi√° b√°n ph·∫£i l·ªõn h∆°n 0")
    private BigDecimal giaBan;

    // üîπ S·ªë l∆∞·ª£ng t·ªìn (>= 0)
    @Column(name = "so_luong_ton", nullable = false)
    @NotNull(message = "S·ªë l∆∞·ª£ng t·ªìn l√† b·∫Øt bu·ªôc")
    @Min(value = 0, message = "S·ªë l∆∞·ª£ng t·ªìn kh√¥ng ƒë∆∞·ª£c √¢m")
    private Integer soLuongTon;

    // üîπ Ng√†y t·∫°o (t·ª± set)
    @Column(name = "ngay_tao")
    private LocalDate ngayTao;

    // üîπ M√¥ t·∫£ (kh√¥ng b·∫Øt bu·ªôc, gi·ªõi h·∫°n k√Ω t·ª±)
    @Column(name = "mo_ta", length = 100)
    @Size(max = 100, message = "M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 100 k√Ω t·ª±")
    private String moTa;

    @PrePersist
    public void prePersist() {
        if (ngayTao == null) {
            ngayTao = LocalDate.now();
        }
    }

    @Transient // Kh√¥ng l∆∞u v√†o DB
    private String hinhAnhUrl;


}
